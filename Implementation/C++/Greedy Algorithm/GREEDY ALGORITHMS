                                                                   


//JOB SEQUENCING PROBLEM
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    vector<pair<int,int>> v;
    int start,end;
   for(int i=0;i<n;i++)
   {
       cin>>start>>end;
       v.push_back(make_pair(end,start));

   } 
   
   sort(v.begin(),v.end());
   cout<<"The jobs available are:";
   for(int i=0;i<n;i++)
   cout<<v[i].second<<" to "<<v[i].first<<"\n";
   int count=1;
   for(int i=0;i<n;i++)
   {
       if(v[i].first<=v[i+1].second)
       count++;
   }
   cout<<"No. of jobs that can be done:"<<count<<"\n";
   return 0;


}



//Egyptian fraction
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void printEgyptian(int nr,int dr)
{
    if(nr==0 || dr==0)//If either the numerator or the denominator is zero
    return;
    if(dr%nr==0)//If the denominator is divisble by numerator
    {
    cout<<"1/"<<dr/nr;
    return;
    }
    if(nr%dr==0)//If the numerator is divisible by denominator then the number is not a fraction
    {
        cout<<"Not a fraction";
        return;
    }
    if(nr>dr)//If numerator is greater than denominator 
    {
        cout<<nr/dr<<"+";
        printEgyptian(nr%dr,dr);
    }
    int n = dr/nr + 1; 
    cout << "1/" << n << " + "; 
  
    // Recur for remaining part 
    printEgyptian(nr*n-dr, dr*n); 




}
int main()
{
    int nr,dr;
    cout<<"Enter the numerator and the denominator";
    cin>>nr>>dr;
    printEgyptian(nr,dr);
    return 0;
}
//Greedy algorithm in arrays-To find the minimum possible product of the array
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void MinProduct(int a[],int n)
{
    //To find the minimum product of an array
    //We find the number of negative numbers
    //If the number of negative numbers are even then the minimum product is the product of all the number except the maximum negative number
    //If the number of the negative numbers are odd, then the minimum product is the product of all the numbers
    //If the number of negative numbers is zero and zero is present then the minimum product is zero
    //If zero is also not present then the minimum product is the smallest positive number
    int min_pos=INT_MAX;int max_pos=INT_MIN;int max_neg=INT_MIN;int min_neg=INT_MAX;
    int count_zero=0;int count_neg=0;
    for(int i=0;i<n;i++)
    {
        if(a[i]==0)
        count_zero++;
        if(a[i]<0)
        {
             count_neg++;
             if(max_neg<a[i])
             max_neg=a[i];
             

        }
        if(a[i]>0)
        {
            if(min_neg>a[i])
            min_pos=a[i];
            if(max_neg<a[i])
            max_pos=a[i];
        }    



    }
    if(count_neg%2!=0)//If the number of negatives are odd
    {
        int p=1;
        for(int i=0;i<n;i++)
        {
            
              p*=a[i];
            
        }
          cout<<p<<"\n";
      

    }
    else if(count_neg!=0 && count_neg%2==0)
    {
        int p=1;
        for(int i=0;i<n;i++)
        {
            if(a[i]!=max_neg)
            p*=a[i];
          
        }
          cout<<p<<"\n";
    }
    else if(count_neg==0 && count_zero!=0)
    {
        cout<<"0";
    }
    else
    {
        cout<<min_pos<<"\n";
    }
    
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    MinProduct(a,n);
    return 0;

}
//Maximise the product of a[i]*i
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void MaxProdInd(int a[],int n)
{
    sort(a,a+n);
    int sum=0;
    for(int i=0;i<n;i++)
    {
        sum+=a[i]*i;

    }
    cout<<sum<<"\n";
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    MaxProdInd(a,n);
    return 0;

}
//Program to find the maximum array sum after k negations
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void MaxSumKNeg(int a[],int n,int k)
{
    int sum=0;int index=0;
    for(int i=1;i<=k;i++)
    {
        int min=INT_MAX;
        for(int j=0;j<n;j++)
        {
            if(min>a[j])
            {
                  min=a[j];
                  index=j;
            }
          
        }
        if(min==0)
        break;
        a[index]=-a[index];
        

        
    }
    
    for(int i=0;i<n;i++)
    {
        sum+=a[i];
        
    }    

    cout<<"Sum"<<sum;
    
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    int k;
    cin>>k;
    MaxSumKNeg(a,n,k);
    return 0;

}
//Program to determine the maximum sum of differences of all permutations
#include <bits/stdc++.h> 
using namespace std; 
  
int MaxSumDifference(int a[], int n) 
{ 
    // final sequence stored in the vector 
    vector<int> finalSequence; 
  
    // sort the original array 
    // so that we can retrieve 
    // the large elements from 
    // the end of array elements 
    sort(a, a + n); 
  
    // In this loop first we will insert 
    // one smallest element not entered 
    // till that time in final sequence 
    // and then enter a highest element 
    // (not entered till that time) in 
    // final sequence so that we 
    // have large difference value. This 
    // process is repeated till all array 
    // has completely entered in sequence. 
    // Here, we have loop till n/2 because 
    // we are inserting two elements at a 
    // time in loop. 
    for (int i = 0; i < n / 2; ++i) { 
        finalSequence.push_back(a[i]); 
        finalSequence.push_back(a[n - i - 1]); 
    } 
  
    // If there are odd elements, push the 
    // middle element at the end. 
    if (n % 2 != 0) 
        finalSequence.push_back(a[n/2]); 
  
    // variable to store the 
    // maximum sum of absolute 
    // difference 
    int MaximumSum = 0; 
  
    // In this loop absolute difference 
    // of elements for the final sequence 
    // is calculated. 
    for (int i = 0; i < n - 1; ++i) { 
        MaximumSum = MaximumSum + abs(finalSequence[i] -  
                                  finalSequence[i + 1]); 
    } 
  
    // absolute difference of last element 
    // and 1st element 
    MaximumSum = MaximumSum + abs(finalSequence[n - 1] - 
                                      finalSequence[0]); 
  
    // return the value 
    return MaximumSum; 
} 
  
// Driver function 
int main() 
{ 
    int a[] = { 1, 2, 4, 8 }; 
    int n = sizeof(a) / sizeof(a[0]); 
  
    cout << MaxSumDifference(a, n) << endl; 
} 





//Program to print the maximum height of  a pyramid
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int PrintHeight(int a[],int n)
{
    int level=1;//Initial level
    for(int i=1;i<=n;i++)
    {
        long long int c=(i*(i+1))/2;
        if(c<n)
        level++;
        else
        break;

    }
    return level;
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    cout<<PrintHeight(a,n);
    return 0;
}


//Given an array of elements,we need to take two adjacent elements from the array and delete the larger element and store the smaller element into another array B and then compute the sum of array B such that it is minimum
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void MinSum(int a[],int n)
{
    sort(a,a+n);
    long long int sum=(n-1)*a[0];
    cout<<sum<<"\n";
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    MinSum(a,n);
}


//Given an array find the number of unit additions and the multiplications needed to make the GCD of the array k
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
 void GCDk(int a[],int n,int k)
{
    int result=0;
    for(int i=0;i<n;i++)
    {
        if(a[i]!=1 && a[i]>k)
        result=result+min(a[i]%k,(k-a[i]%k));
        else
        result=result+k-a[i];
    }
    cout<<result<<"\n";

}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    int k;
    cin>>k;
    GCDk(a,n,k);
    return 0;
}

//Program to find the minimum sum of numbers formed from the digits in the array
//This program shows both the implementation
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void MinSum(int a[],int n)
{
    int num1=0,num2=0;
    sort(a,a+n);
    for(int i=0;i<n;i++)
    {
        if(i%2==0)
        num1=num1*10+a[i];
        else
        num2=num2*10+a[i];
    }
    cout<<"Sum using greedy method:"num2+num1<<"\n";

}
void MinSumUsingMinHeap(int a[],int n)
{
    int num1=0,num2=0;
    priority_queue<int ,vector<int>,greater<int>> p;
    for(int i=0;i<n;i++)
    p.push(a[i]);

    int num1=0,num2=0;
    while(!p.empty())
    {
        num1=num1*10+p.top();
        p.pop();
        if(!.empty())
        {
            num2=num2*10+p.top();
            p.pop();
        }

    }
    cout<<"Sum using priority queue="<<num1+num2<<"\n";
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    MinSum(a,n);
    MinSumUsingMinHeap(a,n);
    return 0;

}




//Program to find the minimum number of changes required to make the array non-decreasing
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void NonDec(int a[],int n)
{
    priority_queue<int,vector<int>,greater<int>> q;
    int sum=0,dif;
    for(int i=0;i<n;i++)
    {
        while(!q.empty() && q.top()<a[i])
        {
            dif=a[i]-q.top();
            sum+=dif;
            q.pop();
            q.push(a[i]);
            

        }
        q.push(a[i]);
    }
    cout<<"No. of changes required are "<<sum;
}
int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    NonDec(a,n);
    return 0;
}

//Making elements of two arrays same by the minimum number of operations
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void sameArray(int a[],int b[],int n)
{
    sort(a,a+n);
    sort(b,b+n);
    int count=0;
    for(int i=0;i<n;i++)
    {
        count+=abs(a[i]-b[i]);
        

    }
    cout<<count<<"\n";

}
int main()
{
    int n;
    cin>>n;
    int a[n],b[n];
    for(int i=0;i<n;i++)
    cin>>a[i];
    for(int i=0;i<n;i++)
    cin>>b[i];
    sameArray(a,b,n);
    return 0;
}
